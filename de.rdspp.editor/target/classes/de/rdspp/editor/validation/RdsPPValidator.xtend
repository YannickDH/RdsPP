/*
 * generated by Xtext 2.12.0
 */
package de.rdspp.editor.validation

import de.rdspp.editor.rdsPP.CommonAssignment
import de.rdspp.editor.rdsPP.InstallationLocationDescription
import de.rdspp.editor.rdsPP.LocationDescription
import de.rdspp.editor.rdsPP.ProductDescription
import de.rdspp.editor.rdsPP.RDSPPComponent
import de.rdspp.editor.rdsPP.RdsPPPackage
import de.rdspp.editor.rdsPP.SignalIdentification
import org.eclipse.xtext.validation.Check
import de.rdspp.editor.rdsPP.FunctionalDesignation
import de.rdspp.editor.rdsPP.DocumentIdentification
import de.rdspp.editor.rdsPP.FunctionalAssignment
import de.rdspp.editor.rdsPP.ConnectionIdentification

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RdsPPValidator extends AbstractRdsPPValidator {

	public static val BAD_CHARACTER = "Die Bezeichnung enthält ein unerwünschtes Zeichen"
	public static val MESSAGE_BAD_CHARACTER_OI = "Bitte verzichten sie auf die Buchstaben I und O (Verwechslungsgefahr mit 0/1)";

	public static val BAD_FROM = "Die Bezeichnung entspricht nicht der vorgegebenen Form"
	public static val MESSAGE_BAD_FROM_COMMON_ASSIGNMENT = "Die Bezeichnung entspricht nicht der Form #(A...N)[.(A../..N)]";
	public static val MESSAGE_BAD_FROM_FunctionalDesignation = "Die Bezeichnung entspricht nicht der Form =[AN[N]] AAANN [AANNN]";
	public static val MESSAGE_BAD_FORM_ConnectionIdentification = "Die Bezeichnung entspricht nicht der Form :AANN";
	public static val MESSAGE_BAD_FROM_DocumentIdentification = "Die Bezeichnung entspricht nicht der Form &AAANNN [/A...N]";
	public static val MESSAGE_BAD_FROM_FunctionalAssignment = "Die Bezeichnung entspricht weder der Form ==[AN[N]] AAANN [.AANN] noch der Form ==[AN[N]] AAANN AANNN [.AANN]";
	public static val MESSAGE_BAD_FROM_InstallationLocationDescription = "Die Bezeichnung entspricht nicht der Form +[AN[N]] AAANN [.A...N]";
	public static val MESSAGE_BAD_FROM_LocationDescription = "Die Bezeichnung entspricht nicht der Form ++[AN[N]] AAANN [.A...N]";
	public static val MESSAGE_BAD_FROM_SignalIdentification = "Die Bezeichnung entspricht nicht der Form ;Klasse_Kurzname_Basisname";
	public static val MESSAGE_BAD_FORM_ProductDescription = "Die Bezeichnung entspricht nicht der Form -AA[N]NN";

	public static val LETTER_O_LOWERCASE = "o";
	public static val LETTER_I_LOWERCASE = "i";

	def void setWarningIfNeeded(String name) {
		if (name !== null &&
			(name.toLowerCase.contains(LETTER_O_LOWERCASE) || name.toLowerCase.contains(LETTER_I_LOWERCASE))) {
			warning(
				MESSAGE_BAD_CHARACTER_OI,
				RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
				BAD_CHARACTER
			)
		}
	}

	@Check
	def checkForOAndI(RDSPPComponent ele) {
		if (ele instanceof LocationDescription) {
			val castedElement = ele as LocationDescription;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(.(\\p{Lu})+(\\d)*)?$")) {
				warning(
					MESSAGE_BAD_FROM_LocationDescription,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof CommonAssignment) {
			val castedElement = ele as CommonAssignment;
			setWarningIfNeeded(castedElement.name);

			if (!ele.name.matches("^(\\p{Lu})+(\\d)*(\\.(\\p{Lu})+(\\d)*)?$")) {
				warning(
					MESSAGE_BAD_FROM_COMMON_ASSIGNMENT,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof DocumentIdentification) {
			val castedElement = ele as DocumentIdentification;
			setWarningIfNeeded(castedElement.name);

			if (!ele.name.matches("^\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d\\d(/(\\p{Lu})+(\\d)*)?$")) {
				warning(
					MESSAGE_BAD_FROM_DocumentIdentification,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof FunctionalAssignment) {
			val castedElement = ele as FunctionalAssignment;
			setWarningIfNeeded(castedElement.name);

			if (!ele.name.matches(// ==[AN[N]] AAANN [.AANN] || ==[AN[N]] AAANN AANNN [.AANN]
			"^(\\p{Lu}\\d\\d?)?\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)?(.\\p{Lu}\\p{Lu}\\d\\d)?$")) {
				warning(
					MESSAGE_BAD_FROM_FunctionalAssignment,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof ProductDescription) {
			val castedElement = ele as ProductDescription;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^\\p{Lu}\\p{Lu}\\d\\d(\\d)?$")) {
				warning(
					MESSAGE_BAD_FORM_ProductDescription,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof InstallationLocationDescription) {
			val castedElement = ele as InstallationLocationDescription;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(.(\\p{Lu})+(\\d)*)?$")) {
				warning(
					MESSAGE_BAD_FROM_InstallationLocationDescription,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof SignalIdentification) {
			val castedElement = ele as SignalIdentification;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^\\p{Lu}_([a-zA-Z])+_([a-zA-Z])+$")) {
				warning(
					MESSAGE_BAD_FROM_SignalIdentification,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof ConnectionIdentification) {
			val castedElement = ele as ConnectionIdentification;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^\\p{Lu}\\p{Lu}\\d\\d$")) {
				warning(
					MESSAGE_BAD_FORM_ConnectionIdentification,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		} else if (ele instanceof FunctionalDesignation) {
			val castedElement = ele as FunctionalDesignation;
			setWarningIfNeeded(castedElement.name);
			if (!ele.name.matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(\\p{Lu}\\p{Lu}\\d\\d\\d)?$")) {
				warning(
					MESSAGE_BAD_FROM_FunctionalDesignation,
					RdsPPPackage.Literals.RDSPP_COMPONENT__NAME,
					BAD_FROM
				)
			}
		}
	}
}
