/**
 * generated by Xtext 2.12.0
 */
package de.rdspp.editor.validation;

import de.rdspp.editor.rdsPP.CommonAssignment;
import de.rdspp.editor.rdsPP.ConnectionIdentification;
import de.rdspp.editor.rdsPP.DocumentIdentification;
import de.rdspp.editor.rdsPP.FunctionalAssignment;
import de.rdspp.editor.rdsPP.FunctionalDesignation;
import de.rdspp.editor.rdsPP.InstallationLocationDescription;
import de.rdspp.editor.rdsPP.LocationDescription;
import de.rdspp.editor.rdsPP.ProductDescription;
import de.rdspp.editor.rdsPP.RDSPPComponent;
import de.rdspp.editor.rdsPP.RdsPPPackage;
import de.rdspp.editor.rdsPP.SignalIdentification;
import de.rdspp.editor.validation.AbstractRdsPPValidator;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class RdsPPValidator extends AbstractRdsPPValidator {
  public final static String BAD_CHARACTER = "Die Bezeichnung enthält ein unerwünschtes Zeichen";
  
  public final static String MESSAGE_BAD_CHARACTER_OI = "Bitte verzichten sie auf die Buchstaben I und O (Verwechslungsgefahr mit 0/1)";
  
  public final static String BAD_FROM = "Die Bezeichnung entspricht nicht der vorgegebenen Form";
  
  public final static String MESSAGE_BAD_FROM_COMMON_ASSIGNMENT = "Die Bezeichnung entspricht nicht der Form #(A...N)[.(A../..N)]";
  
  public final static String MESSAGE_BAD_FROM_FunctionalDesignation = "Die Bezeichnung entspricht nicht der Form =[AN[N]] AAANN [AANNN]";
  
  public final static String MESSAGE_BAD_FORM_ConnectionIdentification = "Die Bezeichnung entspricht nicht der Form :AANN";
  
  public final static String MESSAGE_BAD_FROM_DocumentIdentification = "Die Bezeichnung entspricht nicht der Form &AAANNN [/A...N]";
  
  public final static String MESSAGE_BAD_FROM_FunctionalAssignment = "Die Bezeichnung entspricht weder der Form ==[AN[N]] AAANN [.AANN] noch der Form ==[AN[N]] AAANN AANNN [.AANN]";
  
  public final static String MESSAGE_BAD_FROM_InstallationLocationDescription = "Die Bezeichnung entspricht nicht der Form +[AN[N]] AAANN [.A...N]";
  
  public final static String MESSAGE_BAD_FROM_LocationDescription = "Die Bezeichnung entspricht nicht der Form ++[AN[N]] AAANN [.A...N]";
  
  public final static String MESSAGE_BAD_FROM_SignalIdentification = "Die Bezeichnung entspricht nicht der Form ;Klasse_Kurzname_Basisname";
  
  public final static String MESSAGE_BAD_FORM_ProductDescription = "Die Bezeichnung entspricht nicht der Form -AA[N]NN";
  
  public final static String LETTER_O_LOWERCASE = "o";
  
  public final static String LETTER_I_LOWERCASE = "i";
  
  public void setWarningIfNeeded(final String name) {
    if (((name != null) && (name.toLowerCase().contains(RdsPPValidator.LETTER_O_LOWERCASE) || name.toLowerCase().contains(RdsPPValidator.LETTER_I_LOWERCASE)))) {
      this.warning(
        RdsPPValidator.MESSAGE_BAD_CHARACTER_OI, 
        RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
        RdsPPValidator.BAD_CHARACTER);
    }
  }
  
  @Check
  public void checkForOAndI(final RDSPPComponent ele) {
    if ((ele instanceof LocationDescription)) {
      final LocationDescription castedElement = ((LocationDescription) ele);
      this.setWarningIfNeeded(castedElement.getName());
      boolean _matches = ((LocationDescription)ele).getName().matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(.(\\p{Lu})+(\\d)*)?$");
      boolean _not = (!_matches);
      if (_not) {
        this.warning(
          RdsPPValidator.MESSAGE_BAD_FROM_LocationDescription, 
          RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
          RdsPPValidator.BAD_FROM);
      }
    } else {
      if ((ele instanceof CommonAssignment)) {
        final CommonAssignment castedElement_1 = ((CommonAssignment) ele);
        this.setWarningIfNeeded(castedElement_1.getName());
        boolean _matches_1 = ((CommonAssignment)ele).getName().matches("^(\\p{Lu})+(\\d)*(\\.(\\p{Lu})+(\\d)*)?$");
        boolean _not_1 = (!_matches_1);
        if (_not_1) {
          this.warning(
            RdsPPValidator.MESSAGE_BAD_FROM_COMMON_ASSIGNMENT, 
            RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
            RdsPPValidator.BAD_FROM);
        }
      } else {
        if ((ele instanceof DocumentIdentification)) {
          final DocumentIdentification castedElement_2 = ((DocumentIdentification) ele);
          this.setWarningIfNeeded(castedElement_2.getName());
          boolean _matches_2 = ((DocumentIdentification)ele).getName().matches("^\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d\\d(/(\\p{Lu})+(\\d)*)?$");
          boolean _not_2 = (!_matches_2);
          if (_not_2) {
            this.warning(
              RdsPPValidator.MESSAGE_BAD_FROM_DocumentIdentification, 
              RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
              RdsPPValidator.BAD_FROM);
          }
        } else {
          if ((ele instanceof FunctionalAssignment)) {
            final FunctionalAssignment castedElement_3 = ((FunctionalAssignment) ele);
            this.setWarningIfNeeded(castedElement_3.getName());
            boolean _matches_3 = ((FunctionalAssignment)ele).getName().matches(
              "^(\\p{Lu}\\d\\d?)?\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)?(.\\p{Lu}\\p{Lu}\\d\\d)?$");
            boolean _not_3 = (!_matches_3);
            if (_not_3) {
              this.warning(
                RdsPPValidator.MESSAGE_BAD_FROM_FunctionalAssignment, 
                RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                RdsPPValidator.BAD_FROM);
            }
          } else {
            if ((ele instanceof ProductDescription)) {
              final ProductDescription castedElement_4 = ((ProductDescription) ele);
              this.setWarningIfNeeded(castedElement_4.getName());
              boolean _matches_4 = ((ProductDescription)ele).getName().matches("^\\p{Lu}\\p{Lu}\\d\\d(\\d)?$");
              boolean _not_4 = (!_matches_4);
              if (_not_4) {
                this.warning(
                  RdsPPValidator.MESSAGE_BAD_FORM_ProductDescription, 
                  RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                  RdsPPValidator.BAD_FROM);
              }
            } else {
              if ((ele instanceof InstallationLocationDescription)) {
                final InstallationLocationDescription castedElement_5 = ((InstallationLocationDescription) ele);
                this.setWarningIfNeeded(castedElement_5.getName());
                boolean _matches_5 = ((InstallationLocationDescription)ele).getName().matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(.(\\p{Lu})+(\\d)*)?$");
                boolean _not_5 = (!_matches_5);
                if (_not_5) {
                  this.warning(
                    RdsPPValidator.MESSAGE_BAD_FROM_InstallationLocationDescription, 
                    RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                    RdsPPValidator.BAD_FROM);
                }
              } else {
                if ((ele instanceof SignalIdentification)) {
                  final SignalIdentification castedElement_6 = ((SignalIdentification) ele);
                  this.setWarningIfNeeded(castedElement_6.getName());
                  boolean _matches_6 = ((SignalIdentification)ele).getName().matches("^\\p{Lu}_([a-zA-Z])+_([a-zA-Z])+$");
                  boolean _not_6 = (!_matches_6);
                  if (_not_6) {
                    this.warning(
                      RdsPPValidator.MESSAGE_BAD_FROM_SignalIdentification, 
                      RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                      RdsPPValidator.BAD_FROM);
                  }
                } else {
                  if ((ele instanceof ConnectionIdentification)) {
                    final ConnectionIdentification castedElement_7 = ((ConnectionIdentification) ele);
                    this.setWarningIfNeeded(castedElement_7.getName());
                    boolean _matches_7 = ((ConnectionIdentification)ele).getName().matches("^\\p{Lu}\\p{Lu}\\d\\d$");
                    boolean _not_7 = (!_matches_7);
                    if (_not_7) {
                      this.warning(
                        RdsPPValidator.MESSAGE_BAD_FORM_ConnectionIdentification, 
                        RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                        RdsPPValidator.BAD_FROM);
                    }
                  } else {
                    if ((ele instanceof FunctionalDesignation)) {
                      final FunctionalDesignation castedElement_8 = ((FunctionalDesignation) ele);
                      this.setWarningIfNeeded(castedElement_8.getName());
                      boolean _matches_8 = ((FunctionalDesignation)ele).getName().matches("^(\\p{Lu}\\d\\d?)?(\\p{Lu}\\p{Lu}\\p{Lu}\\d\\d)(\\p{Lu}\\p{Lu}\\d\\d\\d)?$");
                      boolean _not_8 = (!_matches_8);
                      if (_not_8) {
                        this.warning(
                          RdsPPValidator.MESSAGE_BAD_FROM_FunctionalDesignation, 
                          RdsPPPackage.Literals.RDSPP_COMPONENT__NAME, 
                          RdsPPValidator.BAD_FROM);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
