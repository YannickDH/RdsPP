/*
 * generated by Xtext 2.12.0
 */
package de.rdspp.editor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RdsPPGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//	declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRDSPPComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRDSPPMarkingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	RDSPPComponent | RDSPPMarking;
		@Override public ParserRule getRule() { return rule; }
		
		//RDSPPComponent | RDSPPMarking
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RDSPPComponent
		public RuleCall getRDSPPComponentParserRuleCall_0() { return cRDSPPComponentParserRuleCall_0; }
		
		//RDSPPMarking
		public RuleCall getRDSPPMarkingParserRuleCall_1() { return cRDSPPMarkingParserRuleCall_1; }
	}
	public class RDSPPMarkingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.RDSPPMarking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRDSPPKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGemeinsameZuordnungAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cGemeinsameZuordnungCommonAssignmentCrossReference_1_1_0 = (CrossReference)cGemeinsameZuordnungAssignment_1_1.eContents().get(0);
		private final RuleCall cGemeinsameZuordnungCommonAssignmentIDTerminalRuleCall_1_1_0_1 = (RuleCall)cGemeinsameZuordnungCommonAssignmentCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFunktionsbezogeneKennzeichnungAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFunktionsbezogeneKennzeichnungFunctionalDesignationCrossReference_2_1_0 = (CrossReference)cFunktionsbezogeneKennzeichnungAssignment_2_1.eContents().get(0);
		private final RuleCall cFunktionsbezogeneKennzeichnungFunctionalDesignationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cFunktionsbezogeneKennzeichnungFunctionalDesignationCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunktionaleZuordnungAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFunktionaleZuordnungFunctionalAssignmentCrossReference_3_1_0 = (CrossReference)cFunktionaleZuordnungAssignment_3_1.eContents().get(0);
		private final RuleCall cFunktionaleZuordnungFunctionalAssignmentIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFunktionaleZuordnungFunctionalAssignmentCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEinbauortkennzeichnungAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEinbauortkennzeichnungInstallationLocationDescriptionCrossReference_4_1_0 = (CrossReference)cEinbauortkennzeichnungAssignment_4_1.eContents().get(0);
		private final RuleCall cEinbauortkennzeichnungInstallationLocationDescriptionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEinbauortkennzeichnungInstallationLocationDescriptionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPlusSignPlusSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAufstellungsortkennzeichnungAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAufstellungsortkennzeichnungLocationDescriptionCrossReference_5_1_0 = (CrossReference)cAufstellungsortkennzeichnungAssignment_5_1.eContents().get(0);
		private final RuleCall cAufstellungsortkennzeichnungLocationDescriptionIDTerminalRuleCall_5_1_0_1 = (RuleCall)cAufstellungsortkennzeichnungLocationDescriptionCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProduktbezogenekennzeichnungAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cProduktbezogenekennzeichnungProductDescriptionCrossReference_6_1_0 = (CrossReference)cProduktbezogenekennzeichnungAssignment_6_1.eContents().get(0);
		private final RuleCall cProduktbezogenekennzeichnungProductDescriptionIDTerminalRuleCall_6_1_0_1 = (RuleCall)cProduktbezogenekennzeichnungProductDescriptionCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAnschlusskennzeichnungAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cAnschlusskennzeichnungConnectionIdentificationCrossReference_7_1_0 = (CrossReference)cAnschlusskennzeichnungAssignment_7_1.eContents().get(0);
		private final RuleCall cAnschlusskennzeichnungConnectionIdentificationIDTerminalRuleCall_7_1_0_1 = (RuleCall)cAnschlusskennzeichnungConnectionIdentificationCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSignalkennzeichnungAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cSignalkennzeichnungSignalIdentificationCrossReference_8_1_0 = (CrossReference)cSignalkennzeichnungAssignment_8_1.eContents().get(0);
		private final RuleCall cSignalkennzeichnungSignalIdentificationIDTerminalRuleCall_8_1_0_1 = (RuleCall)cSignalkennzeichnungSignalIdentificationCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAmpersandKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cDokumentenkennzeichnungAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cDokumentenkennzeichnungDocumentIdentificationCrossReference_9_1_0 = (CrossReference)cDokumentenkennzeichnungAssignment_9_1.eContents().get(0);
		private final RuleCall cDokumentenkennzeichnungDocumentIdentificationIDTerminalRuleCall_9_1_0_1 = (RuleCall)cDokumentenkennzeichnungDocumentIdentificationCrossReference_9_1_0.eContents().get(1);
		
		//RDSPPMarking:
		//	"RDS-PPKENNZEICHNUNG" ("#" gemeinsameZuordnung=[CommonAssignment])? ("="
		//	funktionsbezogeneKennzeichnung=[FunctionalDesignation])? ("==" funktionaleZuordnung=[FunctionalAssignment])? ("+"
		//	einbauortkennzeichnung=[InstallationLocationDescription])? ("++" aufstellungsortkennzeichnung=[LocationDescription])?
		//	("-" produktbezogenekennzeichnung=[ProductDescription])? (":" anschlusskennzeichnung=[ConnectionIdentification])?
		//	(";" signalkennzeichnung=[SignalIdentification])? ("&" dokumentenkennzeichnung=[DocumentIdentification])?;
		@Override public ParserRule getRule() { return rule; }
		
		//"RDS-PPKENNZEICHNUNG" ("#" gemeinsameZuordnung=[CommonAssignment])? ("="
		//funktionsbezogeneKennzeichnung=[FunctionalDesignation])? ("==" funktionaleZuordnung=[FunctionalAssignment])? ("+"
		//einbauortkennzeichnung=[InstallationLocationDescription])? ("++" aufstellungsortkennzeichnung=[LocationDescription])?
		//("-" produktbezogenekennzeichnung=[ProductDescription])? (":" anschlusskennzeichnung=[ConnectionIdentification])? (";"
		//signalkennzeichnung=[SignalIdentification])? ("&" dokumentenkennzeichnung=[DocumentIdentification])?
		public Group getGroup() { return cGroup; }
		
		//"RDS-PPKENNZEICHNUNG"
		public Keyword getRDSPPKENNZEICHNUNGKeyword_0() { return cRDSPPKENNZEICHNUNGKeyword_0; }
		
		//("#" gemeinsameZuordnung=[CommonAssignment])?
		public Group getGroup_1() { return cGroup_1; }
		
		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//gemeinsameZuordnung=[CommonAssignment]
		public Assignment getGemeinsameZuordnungAssignment_1_1() { return cGemeinsameZuordnungAssignment_1_1; }
		
		//[CommonAssignment]
		public CrossReference getGemeinsameZuordnungCommonAssignmentCrossReference_1_1_0() { return cGemeinsameZuordnungCommonAssignmentCrossReference_1_1_0; }
		
		//ID
		public RuleCall getGemeinsameZuordnungCommonAssignmentIDTerminalRuleCall_1_1_0_1() { return cGemeinsameZuordnungCommonAssignmentIDTerminalRuleCall_1_1_0_1; }
		
		//("=" funktionsbezogeneKennzeichnung=[FunctionalDesignation])?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//funktionsbezogeneKennzeichnung=[FunctionalDesignation]
		public Assignment getFunktionsbezogeneKennzeichnungAssignment_2_1() { return cFunktionsbezogeneKennzeichnungAssignment_2_1; }
		
		//[FunctionalDesignation]
		public CrossReference getFunktionsbezogeneKennzeichnungFunctionalDesignationCrossReference_2_1_0() { return cFunktionsbezogeneKennzeichnungFunctionalDesignationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getFunktionsbezogeneKennzeichnungFunctionalDesignationIDTerminalRuleCall_2_1_0_1() { return cFunktionsbezogeneKennzeichnungFunctionalDesignationIDTerminalRuleCall_2_1_0_1; }
		
		//("==" funktionaleZuordnung=[FunctionalAssignment])?
		public Group getGroup_3() { return cGroup_3; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_3_0() { return cEqualsSignEqualsSignKeyword_3_0; }
		
		//funktionaleZuordnung=[FunctionalAssignment]
		public Assignment getFunktionaleZuordnungAssignment_3_1() { return cFunktionaleZuordnungAssignment_3_1; }
		
		//[FunctionalAssignment]
		public CrossReference getFunktionaleZuordnungFunctionalAssignmentCrossReference_3_1_0() { return cFunktionaleZuordnungFunctionalAssignmentCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFunktionaleZuordnungFunctionalAssignmentIDTerminalRuleCall_3_1_0_1() { return cFunktionaleZuordnungFunctionalAssignmentIDTerminalRuleCall_3_1_0_1; }
		
		//("+" einbauortkennzeichnung=[InstallationLocationDescription])?
		public Group getGroup_4() { return cGroup_4; }
		
		//"+"
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }
		
		//einbauortkennzeichnung=[InstallationLocationDescription]
		public Assignment getEinbauortkennzeichnungAssignment_4_1() { return cEinbauortkennzeichnungAssignment_4_1; }
		
		//[InstallationLocationDescription]
		public CrossReference getEinbauortkennzeichnungInstallationLocationDescriptionCrossReference_4_1_0() { return cEinbauortkennzeichnungInstallationLocationDescriptionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getEinbauortkennzeichnungInstallationLocationDescriptionIDTerminalRuleCall_4_1_0_1() { return cEinbauortkennzeichnungInstallationLocationDescriptionIDTerminalRuleCall_4_1_0_1; }
		
		//("++" aufstellungsortkennzeichnung=[LocationDescription])?
		public Group getGroup_5() { return cGroup_5; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_5_0() { return cPlusSignPlusSignKeyword_5_0; }
		
		//aufstellungsortkennzeichnung=[LocationDescription]
		public Assignment getAufstellungsortkennzeichnungAssignment_5_1() { return cAufstellungsortkennzeichnungAssignment_5_1; }
		
		//[LocationDescription]
		public CrossReference getAufstellungsortkennzeichnungLocationDescriptionCrossReference_5_1_0() { return cAufstellungsortkennzeichnungLocationDescriptionCrossReference_5_1_0; }
		
		//ID
		public RuleCall getAufstellungsortkennzeichnungLocationDescriptionIDTerminalRuleCall_5_1_0_1() { return cAufstellungsortkennzeichnungLocationDescriptionIDTerminalRuleCall_5_1_0_1; }
		
		//("-" produktbezogenekennzeichnung=[ProductDescription])?
		public Group getGroup_6() { return cGroup_6; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_6_0() { return cHyphenMinusKeyword_6_0; }
		
		//produktbezogenekennzeichnung=[ProductDescription]
		public Assignment getProduktbezogenekennzeichnungAssignment_6_1() { return cProduktbezogenekennzeichnungAssignment_6_1; }
		
		//[ProductDescription]
		public CrossReference getProduktbezogenekennzeichnungProductDescriptionCrossReference_6_1_0() { return cProduktbezogenekennzeichnungProductDescriptionCrossReference_6_1_0; }
		
		//ID
		public RuleCall getProduktbezogenekennzeichnungProductDescriptionIDTerminalRuleCall_6_1_0_1() { return cProduktbezogenekennzeichnungProductDescriptionIDTerminalRuleCall_6_1_0_1; }
		
		//(":" anschlusskennzeichnung=[ConnectionIdentification])?
		public Group getGroup_7() { return cGroup_7; }
		
		//":"
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }
		
		//anschlusskennzeichnung=[ConnectionIdentification]
		public Assignment getAnschlusskennzeichnungAssignment_7_1() { return cAnschlusskennzeichnungAssignment_7_1; }
		
		//[ConnectionIdentification]
		public CrossReference getAnschlusskennzeichnungConnectionIdentificationCrossReference_7_1_0() { return cAnschlusskennzeichnungConnectionIdentificationCrossReference_7_1_0; }
		
		//ID
		public RuleCall getAnschlusskennzeichnungConnectionIdentificationIDTerminalRuleCall_7_1_0_1() { return cAnschlusskennzeichnungConnectionIdentificationIDTerminalRuleCall_7_1_0_1; }
		
		//(";" signalkennzeichnung=[SignalIdentification])?
		public Group getGroup_8() { return cGroup_8; }
		
		//";"
		public Keyword getSemicolonKeyword_8_0() { return cSemicolonKeyword_8_0; }
		
		//signalkennzeichnung=[SignalIdentification]
		public Assignment getSignalkennzeichnungAssignment_8_1() { return cSignalkennzeichnungAssignment_8_1; }
		
		//[SignalIdentification]
		public CrossReference getSignalkennzeichnungSignalIdentificationCrossReference_8_1_0() { return cSignalkennzeichnungSignalIdentificationCrossReference_8_1_0; }
		
		//ID
		public RuleCall getSignalkennzeichnungSignalIdentificationIDTerminalRuleCall_8_1_0_1() { return cSignalkennzeichnungSignalIdentificationIDTerminalRuleCall_8_1_0_1; }
		
		//("&" dokumentenkennzeichnung=[DocumentIdentification])?
		public Group getGroup_9() { return cGroup_9; }
		
		//"&"
		public Keyword getAmpersandKeyword_9_0() { return cAmpersandKeyword_9_0; }
		
		//dokumentenkennzeichnung=[DocumentIdentification]
		public Assignment getDokumentenkennzeichnungAssignment_9_1() { return cDokumentenkennzeichnungAssignment_9_1; }
		
		//[DocumentIdentification]
		public CrossReference getDokumentenkennzeichnungDocumentIdentificationCrossReference_9_1_0() { return cDokumentenkennzeichnungDocumentIdentificationCrossReference_9_1_0; }
		
		//ID
		public RuleCall getDokumentenkennzeichnungDocumentIdentificationIDTerminalRuleCall_9_1_0_1() { return cDokumentenkennzeichnungDocumentIdentificationIDTerminalRuleCall_9_1_0_1; }
	}
	public class RDSPPComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.RDSPPComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommonAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstallationLocationDescriptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionalAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionalDesignationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProductDescriptionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConnectionIdentificationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDocumentIdentificationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSignalIdentificationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//RDSPPComponent:
		//	CommonAssignment | LocationDescription | InstallationLocationDescription | FunctionalAssignment |
		//	FunctionalDesignation | ProductDescription | ConnectionIdentification | DocumentIdentification |
		//	SignalIdentification;
		@Override public ParserRule getRule() { return rule; }
		
		//CommonAssignment | LocationDescription | InstallationLocationDescription | FunctionalAssignment | FunctionalDesignation
		//| ProductDescription | ConnectionIdentification | DocumentIdentification | SignalIdentification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommonAssignment
		public RuleCall getCommonAssignmentParserRuleCall_0() { return cCommonAssignmentParserRuleCall_0; }
		
		//LocationDescription
		public RuleCall getLocationDescriptionParserRuleCall_1() { return cLocationDescriptionParserRuleCall_1; }
		
		//InstallationLocationDescription
		public RuleCall getInstallationLocationDescriptionParserRuleCall_2() { return cInstallationLocationDescriptionParserRuleCall_2; }
		
		//FunctionalAssignment
		public RuleCall getFunctionalAssignmentParserRuleCall_3() { return cFunctionalAssignmentParserRuleCall_3; }
		
		//FunctionalDesignation
		public RuleCall getFunctionalDesignationParserRuleCall_4() { return cFunctionalDesignationParserRuleCall_4; }
		
		//ProductDescription
		public RuleCall getProductDescriptionParserRuleCall_5() { return cProductDescriptionParserRuleCall_5; }
		
		//ConnectionIdentification
		public RuleCall getConnectionIdentificationParserRuleCall_6() { return cConnectionIdentificationParserRuleCall_6; }
		
		//DocumentIdentification
		public RuleCall getDocumentIdentificationParserRuleCall_7() { return cDocumentIdentificationParserRuleCall_7; }
		
		//SignalIdentification
		public RuleCall getSignalIdentificationParserRuleCall_8() { return cSignalIdentificationParserRuleCall_8; }
	}
	public class SignalIdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.SignalIdentification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIGNALKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//SignalIdentification:
		//	"SIGNALKENNZEICHNUNG" ";" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"SIGNALKENNZEICHNUNG" ";" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"SIGNALKENNZEICHNUNG"
		public Keyword getSIGNALKENNZEICHNUNGKeyword_0() { return cSIGNALKENNZEICHNUNGKeyword_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class DocumentIdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.DocumentIdentification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOKUMENTENKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//DocumentIdentification:
		//	"DOKUMENTENKENNZEICHNUNG" "&" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"DOKUMENTENKENNZEICHNUNG" "&" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"DOKUMENTENKENNZEICHNUNG"
		public Keyword getDOKUMENTENKENNZEICHNUNGKeyword_0() { return cDOKUMENTENKENNZEICHNUNGKeyword_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class FunctionalAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.FunctionalAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNKTIONALEZUORDNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//FunctionalAssignment:
		//	"FUNKTIONALEZUORDNUNG" "==" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"FUNKTIONALEZUORDNUNG" "==" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"FUNKTIONALEZUORDNUNG"
		public Keyword getFUNKTIONALEZUORDNUNGKeyword_0() { return cFUNKTIONALEZUORDNUNGKeyword_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class FunctionalDesignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.FunctionalDesignation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNKTIONSBEZOGENEKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//FunctionalDesignation:
		//	"FUNKTIONSBEZOGENEKENNZEICHNUNG" "=" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"FUNKTIONSBEZOGENEKENNZEICHNUNG" "=" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"FUNKTIONSBEZOGENEKENNZEICHNUNG"
		public Keyword getFUNKTIONSBEZOGENEKENNZEICHNUNGKeyword_0() { return cFUNKTIONSBEZOGENEKENNZEICHNUNGKeyword_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class InstallationLocationDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.InstallationLocationDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEINBAUORTKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//InstallationLocationDescription:
		//	"EINBAUORTKENNZEICHNUNG" "+" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"EINBAUORTKENNZEICHNUNG" "+" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"EINBAUORTKENNZEICHNUNG"
		public Keyword getEINBAUORTKENNZEICHNUNGKeyword_0() { return cEINBAUORTKENNZEICHNUNGKeyword_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class LocationDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.LocationDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAUFSTELLUNGSORTKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//LocationDescription:
		//	"AUFSTELLUNGSORTKENNZEICHNUNG" "++" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"AUFSTELLUNGSORTKENNZEICHNUNG" "++" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"AUFSTELLUNGSORTKENNZEICHNUNG"
		public Keyword getAUFSTELLUNGSORTKENNZEICHNUNGKeyword_0() { return cAUFSTELLUNGSORTKENNZEICHNUNGKeyword_0; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ConnectionIdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.ConnectionIdentification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cANSCHLUSSKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//ConnectionIdentification:
		//	"ANSCHLUSSKENNZEICHNUNG" ":" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"ANSCHLUSSKENNZEICHNUNG" ":" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"ANSCHLUSSKENNZEICHNUNG"
		public Keyword getANSCHLUSSKENNZEICHNUNGKeyword_0() { return cANSCHLUSSKENNZEICHNUNGKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class CommonAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.CommonAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGEMEINSAMEZUORDNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//CommonAssignment:
		//	"GEMEINSAMEZUORDNUNG" "#" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"GEMEINSAMEZUORDNUNG" "#" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"GEMEINSAMEZUORDNUNG"
		public Keyword getGEMEINSAMEZUORDNUNGKeyword_0() { return cGEMEINSAMEZUORDNUNGKeyword_0; }
		
		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ProductDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.ProductDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRODUKTBEZOGENEKENNZEICHNUNGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDescriptionAssignment_3_1.eContents().get(0);
		
		//ProductDescription:
		//	"PRODUKTBEZOGENEKENNZEICHNUNG" "-" name=ID ("->" description=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"PRODUKTBEZOGENEKENNZEICHNUNG" "-" name=ID ("->" description=STRING)?
		public Group getGroup() { return cGroup; }
		
		//"PRODUKTBEZOGENEKENNZEICHNUNG"
		public Keyword getPRODUKTBEZOGENEKENNZEICHNUNGKeyword_0() { return cPRODUKTBEZOGENEKENNZEICHNUNGKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("->" description=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_1() { return cDescriptionAssignment_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final RDSPPMarkingElements pRDSPPMarking;
	private final RDSPPComponentElements pRDSPPComponent;
	private final SignalIdentificationElements pSignalIdentification;
	private final DocumentIdentificationElements pDocumentIdentification;
	private final FunctionalAssignmentElements pFunctionalAssignment;
	private final FunctionalDesignationElements pFunctionalDesignation;
	private final InstallationLocationDescriptionElements pInstallationLocationDescription;
	private final LocationDescriptionElements pLocationDescription;
	private final ConnectionIdentificationElements pConnectionIdentification;
	private final CommonAssignmentElements pCommonAssignment;
	private final ProductDescriptionElements pProductDescription;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RdsPPGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pRDSPPMarking = new RDSPPMarkingElements();
		this.pRDSPPComponent = new RDSPPComponentElements();
		this.pSignalIdentification = new SignalIdentificationElements();
		this.pDocumentIdentification = new DocumentIdentificationElements();
		this.pFunctionalAssignment = new FunctionalAssignmentElements();
		this.pFunctionalDesignation = new FunctionalDesignationElements();
		this.pInstallationLocationDescription = new InstallationLocationDescriptionElements();
		this.pLocationDescription = new LocationDescriptionElements();
		this.pConnectionIdentification = new ConnectionIdentificationElements();
		this.pCommonAssignment = new CommonAssignmentElements();
		this.pProductDescription = new ProductDescriptionElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.rdspp.editor.RdsPP.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.rdspp.editor.RdsPP".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	declarations+=Declaration*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration:
	//	RDSPPComponent | RDSPPMarking;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//RDSPPMarking:
	//	"RDS-PPKENNZEICHNUNG" ("#" gemeinsameZuordnung=[CommonAssignment])? ("="
	//	funktionsbezogeneKennzeichnung=[FunctionalDesignation])? ("==" funktionaleZuordnung=[FunctionalAssignment])? ("+"
	//	einbauortkennzeichnung=[InstallationLocationDescription])? ("++" aufstellungsortkennzeichnung=[LocationDescription])?
	//	("-" produktbezogenekennzeichnung=[ProductDescription])? (":" anschlusskennzeichnung=[ConnectionIdentification])?
	//	(";" signalkennzeichnung=[SignalIdentification])? ("&" dokumentenkennzeichnung=[DocumentIdentification])?;
	public RDSPPMarkingElements getRDSPPMarkingAccess() {
		return pRDSPPMarking;
	}
	
	public ParserRule getRDSPPMarkingRule() {
		return getRDSPPMarkingAccess().getRule();
	}
	
	//RDSPPComponent:
	//	CommonAssignment | LocationDescription | InstallationLocationDescription | FunctionalAssignment |
	//	FunctionalDesignation | ProductDescription | ConnectionIdentification | DocumentIdentification |
	//	SignalIdentification;
	public RDSPPComponentElements getRDSPPComponentAccess() {
		return pRDSPPComponent;
	}
	
	public ParserRule getRDSPPComponentRule() {
		return getRDSPPComponentAccess().getRule();
	}
	
	//SignalIdentification:
	//	"SIGNALKENNZEICHNUNG" ";" name=ID ("->" description=STRING)?;
	public SignalIdentificationElements getSignalIdentificationAccess() {
		return pSignalIdentification;
	}
	
	public ParserRule getSignalIdentificationRule() {
		return getSignalIdentificationAccess().getRule();
	}
	
	//DocumentIdentification:
	//	"DOKUMENTENKENNZEICHNUNG" "&" name=ID ("->" description=STRING)?;
	public DocumentIdentificationElements getDocumentIdentificationAccess() {
		return pDocumentIdentification;
	}
	
	public ParserRule getDocumentIdentificationRule() {
		return getDocumentIdentificationAccess().getRule();
	}
	
	//FunctionalAssignment:
	//	"FUNKTIONALEZUORDNUNG" "==" name=ID ("->" description=STRING)?;
	public FunctionalAssignmentElements getFunctionalAssignmentAccess() {
		return pFunctionalAssignment;
	}
	
	public ParserRule getFunctionalAssignmentRule() {
		return getFunctionalAssignmentAccess().getRule();
	}
	
	//FunctionalDesignation:
	//	"FUNKTIONSBEZOGENEKENNZEICHNUNG" "=" name=ID ("->" description=STRING)?;
	public FunctionalDesignationElements getFunctionalDesignationAccess() {
		return pFunctionalDesignation;
	}
	
	public ParserRule getFunctionalDesignationRule() {
		return getFunctionalDesignationAccess().getRule();
	}
	
	//InstallationLocationDescription:
	//	"EINBAUORTKENNZEICHNUNG" "+" name=ID ("->" description=STRING)?;
	public InstallationLocationDescriptionElements getInstallationLocationDescriptionAccess() {
		return pInstallationLocationDescription;
	}
	
	public ParserRule getInstallationLocationDescriptionRule() {
		return getInstallationLocationDescriptionAccess().getRule();
	}
	
	//LocationDescription:
	//	"AUFSTELLUNGSORTKENNZEICHNUNG" "++" name=ID ("->" description=STRING)?;
	public LocationDescriptionElements getLocationDescriptionAccess() {
		return pLocationDescription;
	}
	
	public ParserRule getLocationDescriptionRule() {
		return getLocationDescriptionAccess().getRule();
	}
	
	//ConnectionIdentification:
	//	"ANSCHLUSSKENNZEICHNUNG" ":" name=ID ("->" description=STRING)?;
	public ConnectionIdentificationElements getConnectionIdentificationAccess() {
		return pConnectionIdentification;
	}
	
	public ParserRule getConnectionIdentificationRule() {
		return getConnectionIdentificationAccess().getRule();
	}
	
	//CommonAssignment:
	//	"GEMEINSAMEZUORDNUNG" "#" name=ID ("->" description=STRING)?;
	public CommonAssignmentElements getCommonAssignmentAccess() {
		return pCommonAssignment;
	}
	
	public ParserRule getCommonAssignmentRule() {
		return getCommonAssignmentAccess().getRule();
	}
	
	//ProductDescription:
	//	"PRODUKTBEZOGENEKENNZEICHNUNG" "-" name=ID ("->" description=STRING)?;
	public ProductDescriptionElements getProductDescriptionAccess() {
		return pProductDescription;
	}
	
	public ParserRule getProductDescriptionRule() {
		return getProductDescriptionAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	('a'..'z' | 'A'..'Z' | INT) ('a'..'z' | 'A'..'Z' | INT | "." | "/" | "_")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
