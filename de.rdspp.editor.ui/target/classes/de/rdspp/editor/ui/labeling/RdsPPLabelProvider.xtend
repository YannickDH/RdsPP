/*
 * generated by Xtext 2.12.0
 */
package de.rdspp.editor.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import de.rdspp.editor.rdsPP.LocationDescription
import de.rdspp.editor.rdsPP.CommonAssignment
import de.rdspp.editor.rdsPP.ProductDescription
import de.rdspp.editor.rdsPP.InstallationLocationDescription
import de.rdspp.editor.rdsPP.FunctionalDesignation
import de.rdspp.editor.rdsPP.FunctionalAssignment
import de.rdspp.editor.rdsPP.SignalIdentification
import de.rdspp.editor.rdsPP.DocumentIdentification
import de.rdspp.editor.rdsPP.ConnectionIdentification

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class RdsPPLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	override text(Object ele) {
		if (ele instanceof LocationDescription) {
			val castedEle = ele as LocationDescription;
			setText(castedEle.description, '\n Aufstellungsortkennzeichnung: \n');
		} else if (ele instanceof CommonAssignment) {
			val castedEle = ele as CommonAssignment;
			setText(castedEle.description, '\n Gemeinsame Zuordnung: \n');
		} else if (ele instanceof ProductDescription) {
			val castedEle = ele as ProductDescription;
			setText(castedEle.description, '\n Produktbezogene Kennzeichnung: \n');
		} else if (ele instanceof InstallationLocationDescription) {
			val castedEle = ele as InstallationLocationDescription;
			setText(castedEle.description, '\n Einbauort Kennzeichnung: \n');
		} else if (ele instanceof FunctionalDesignation) {
			val castedEle = ele as FunctionalDesignation;
			setText(castedEle.description, '\n Funktionsbezogene Kennzeichnung: \n');
		} else if (ele instanceof FunctionalAssignment) {
			val castedEle = ele as FunctionalAssignment;
			setText(castedEle.description, '\n Funktionale Zuordnung: \n');
		} else if (ele instanceof SignalIdentification) {
			val castedEle = ele as SignalIdentification;
			setText(castedEle.description, '\n Signalkennzeichnung: \n');
		} else if (ele instanceof DocumentIdentification) {
			val castedEle = ele as DocumentIdentification;
			setText(castedEle.description, '\n Dokumentenkennzeichnung: \n');
		} else if (ele instanceof ConnectionIdentification) {
			val castedEle = ele as ConnectionIdentification;
			setText(castedEle.description, '\n Anschlusskennzeichnung: \n');
		} else {
			// use default method if unknown type
			super.text(ele);
		}
	}

	def String setText(String description, String designation) {
		if (description !== null) {
			return designation + description;
		} else {
			return designation;
		}
	}
}
